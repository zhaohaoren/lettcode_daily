package simple.q5_青蛙跳台阶问题;

/**
 * 我的思路：
 * 实在很抱歉！没想出来，直接看答案了，看完我都惊了！ MDZZ。。。
 * 我是排比去做的，冥冥中能感觉到跳到n和前面跳法有关联，但是怎么也没想到就是斐波那契数列！
 * <p>
 * 题解：
 * 可以看看jump.jpg 助于理解：
 * 当跳n阶台阶的时候，因为只可以跳1步或者2步，所以最远的出发点就是n-2处，这里有n种跳法！
 * 在n-2处，青蛙可以选择跳1步或者2步：
 * 如果是跳2步 => 那么所有情况就是f(n-2)相等的，调到n-2台阶然后一跳2步到n
 * 如果是跳1步 => 那么所有的情况就不能看n-2的，就要去看n-1的。通过1步跳到n的，和f(n-1)情况是一样的。
 * 其实就是问题转化为：最后一跳会从哪些情况下跳过来。最后一跳要么2步，要么就1步，2步就是n-2点调过来的，1步就是n-1跳过来的（这2个各自涵盖了所有的情况，但是最后一跳到n却只有一种情况，所以总计就是f(n-1)+f(n-2)）。
 * 我起先是没整明白是因为我把这2个加法 认为是为了在f(n-2)基础上再看会有多少分支情况 加上了f(n-1)，其实两个是完全独立不想干的！
 */
class Solution {

    public int numWays(int n) {
        int pre = 1;
        int cur = 1;
        int tmp;
        for (int i = 0; i < n; i++) {
            tmp = cur;
            cur = (pre + cur) % 1000000007;
            pre = tmp;
        }
        return pre;
    }

    public static void main(String[] args) {
        System.out.println(new Solution().numWays(2));
    }
}